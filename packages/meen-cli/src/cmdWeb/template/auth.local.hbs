const LocalStrategy = require('passport-local').Strategy;
const bcrypt = require('bcryptjs');
const passport = require('passport');
const { User } = require('@local/models');

module.exports = (app) => {
    app.use(passport.initialize());
    app.use(passport.session());

    passport.serializeUser((user, next) => {
        next(null, user._id);
    });

    passport.deserializeUser(async (id, next) => {
        try {
            const user = await User.findOne({ _id: id });
            next(null, user);
        } catch (error) {
            next(error);
        }
    });

    passport.use(new LocalStrategy({
            usernameField: 'username',
            passwordField: 'password',
            passReqToCallback: true,
        },
        async (req, username, password, next) => {
            try {
                const user = await User.findOne({ username: username }, '+password');

                if (!user) {
                    return next(null, false, {
                        message: 'Your username or password is invalid!',
                    });
                }

                if (bcrypt.compareSync(password, user.password)) {
                    return next(null, user);
                } else {
                    return next(null, false, {
                        message: 'Your username or password is invalid!',
                    });
                }
            } catch (error) {
                next(error);
            }
        },
    ));
};
